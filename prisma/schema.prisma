generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id            String   @id @default(cuid())
  name          String
  updated       String?
  created       String?
  storeTimeZone String?
  region        String?
  logo          String?
  email         String?
  phone         String?
  adminEmail    String?
  branches      Branch[]
  // user          User[]
  // userId        String?
  User          User[]
}

model Branch {
  id                  String     @id @default(cuid())
  name                String
  updated             String?
  created             String?
  ppt_image           String
  email               String
  phone               String?
  city                String
  address             String
  extraAddress        String
  rating              Float?
  rating_quantity     Int?
  cuisine             String
  wifiName            String?
  wifipwd             String?
  instagram           String?
  facebook            String?
  twitter             String?
  open                Int?
  close               Int?
  firstTip            Decimal?   @default(10)
  secondTip           Decimal?   @default(12)
  thirdTip            Decimal?   @default(15)
  firstPaymentMethod  String?    @default("cash")
  secondPaymentMethod String?    @default("card")
  thirdPaymentMethod  String?    @default("paypal")
  fourthPaymentMethod String?    @default("apple_pay")
  menus               Menu[]
  table               Table[]
  orders              Order[]
  users               User[]
  employees           Employee[]
  feedbacks           Feedback[]
  payments            Payments[]
  restaurant          Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId        String
}

model Table {
  id                String     @id @default(cuid())
  table_number      Int
  floorId           String?
  locationId        String?
  seats             Int?
  order_in_progress Boolean
  branch            Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branchId          String
  order             Order?
  users             User[]
  employees         Employee[]
  feedbacks         Feedback[]
}

model Menu {
  id              String           @id @default(cuid())
  name            String?
  type            String?
  currency        String?
  fromHour        Decimal?
  toHour          Decimal?
  allday          Boolean?
  branchId        String
  branch          Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuCategories  MenuCategory[]
  personalizeMenu Boolean?         @default(false)
  image           String?
  availabilities  Availabilities[]
}

model Availabilities {
  id             String        @id @default(cuid())
  dayOfWeek      Int?
  startTime      String?
  endTime        String?
  menuId         String
  menu           Menu          @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuCategory   MenuCategory? @relation(fields: [menuCategoryId], references: [id])
  menuCategoryId String?

  @@unique([dayOfWeek, startTime, endTime, menuId])
}

model MenuCategory {
  id                      String           @id @default(cuid())
  accountId               String?
  name                    String
  imageUrl                String?
  nameTranslations        Json?
  description             String?
  descriptionTranslations Json?
  availabilities          Availabilities[]
  menuId                  String
  menu                    Menu             @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItems               MenuItem[]
}

model MenuItem {
  id             String          @id @default(cuid())
  plu            String?
  image          String
  name           String
  description    String
  price          Decimal
  available      Boolean
  menuCategoryId String?
  menuCategory   MenuCategory?   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modifierGroups ModifierGroup[]
  cartItems      CartItem[]
}

model Order {
  id           String     @id @default(cuid())
  tip          Decimal?
  paid         Boolean?
  total        Decimal?
  paidDate     DateTime?
  creationDate DateTime
  orderedDate  DateTime
  active       Boolean?
  table        Table?     @relation(fields: [tableId], references: [id])
  tableId      String?    @unique
  users        User[]
  branch       Branch?    @relation(fields: [branchId], references: [id])
  branchId     String?
  cartItems    CartItem[]
  payments     Payments[]
}

model CartItem {
  id            String      @id @default(cuid())
  plu           String?
  name          String?
  image         String?
  price         Float
  creationDate  String?
  quantity      Int
  orderId       String?
  menuItemId    String?
  menuItem      MenuItem?   @relation(fields: [menuItemId], references: [id])
  order         Order?      @relation(fields: [orderId], references: [id])
  comments      String?
  paid          Boolean?    @default(false)
  paidBy        String?
  stock         Int?
  modifier      Modifiers[]
  feedback      Feedback?   @relation(fields: [feedbackId], references: [id])
  feedbackId    String?
  user          User[]
  activeOnOrder Boolean?
  rating        String?
}

model Modifiers {
  id                      String         @id @default(cuid())
  name                    String?
  mandatorySelected       Boolean?
  onlyOne                 Boolean?
  multiSelect             Boolean?
  mandatoryOneMultiSelect Boolean?
  extraPrice              Decimal?
  modifierGroups          ModifierGroup? @relation(fields: [modifierGroupId], references: [id])
  modifierGroupId         String?
  cartItems               CartItem[]
  cartItemId              String?
}

model ModifierGroup {
  id                  String      @id @default(cuid())
  type                String      @default("radio")
  name                String?
  plu                String?
  max                Int?
  min                Int?
  multiMax           Int?
  multiply            Int?
  nameTranslations    Json?
  minSelectionAllowed Int?
  maxSelectionAllowed Int?
  isMandatory         Boolean?
  modifiers           Modifiers[]
  menuItems           MenuItem[]
  cartItemId          String?
}

model User {
  id           String    @id @default(cuid())
  name         String?
  email        String?   @unique
  creationDate DateTime  @default(now())
  password     Password?
  color        String?
  tip          Decimal?
  paid         Decimal?
  total        Decimal?
  orderId      String?
  orders       Order?    @relation(fields: [orderId], references: [id])
  role         Role?
  branch       Branch?   @relation(fields: [branchId], references: [id])
  branchId     String?

  // restaurant   Restaurant[]
  // restaurantId String?
  cartItems    CartItem[]
  tables       Table?      @relation(fields: [tableId], references: [id])
  tableId      String?
  feedbacks    Feedback[]
  sessions     Session[]
  payments     Payments[]
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Employee {
  id        String     @id @default(cuid())
  role      Role
  name      String
  image     String?
  phone     String?
  email     String
  tables    Table[]
  feedbacks Feedback[]
  branch    Branch?    @relation(fields: [branchId], references: [id])
  branchId  String?
}

enum Role {
  admin
  manager
  waiter
  user
}

model Feedback {
  id           String     @id @default(cuid())
  type         String
  report       String
  creationDate String?
  orderedDate  DateTime?
  branch       Branch?    @relation(fields: [branchId], references: [id])
  employees    Employee[]
  table        Table?     @relation(fields: [tableId], references: [id])
  tableId      String?
  branchId     String?
  // orderItems   OrderItem[]
  cartItems    CartItem[]
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Payments {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  method    PaymentMethod
  amount    Decimal
  tip       Decimal?
  total     Decimal?
  branchId  String?
  branch    Branch?       @relation(fields: [branchId], references: [id])
  orderId   String?
  order     Order?        @relation(fields: [orderId], references: [id])
  userId    String?
  user      User?         @relation(fields: [userId], references: [id])
}

enum PaymentMethod {
  cash
  card
  debitCard
  paypal
  applePay
  other
}

model Deliverect {
  id                   String  @id @default(cuid())
  deliverectToken      String?
  deliverectExpiration Int?
}
