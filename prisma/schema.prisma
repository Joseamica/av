generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id             String           @id @default("cllb3d9b90003cedclcthud41")
  access         Int?
  user           User[]
  restaurants    Restaurant[]
  branches       Branch[]
  tables         Table[]
  orders         Order[]
  employees      Employee[]
  availabilities Availabilities[]
  feedbacks      Feedback[]
  categories     Category[]
  products       Product[]
  modifierGroups ModifierGroup[]
  modifiers      Modifiers[]
  cartItems      CartItem[]
  payments       Payments[]
  menus          Menu[]
  notifications  Notifications[]
}

model Restaurant {
  id            String   @id @default(cuid())
  name          String
  updated       String?
  created       String?
  storeTimeZone String?
  region        String?
  logo          String?
  email         String?
  phone         String?
  adminEmail    String?
  branches      Branch[]
  User          User[]
  adminId       String?  @default("cllb3d9b90003cedclcthud41")
  admin         Admin?   @relation(fields: [adminId], references: [id])
}

model Branch {
  id              String          @id @default(cuid())
  name            String
  restaurantId    String
  address         String
  extraAddress    String
  city            String
  timezone        String?
  phone           String?
  email           String
  language        String?         @default("en")
  image           String
  rating          Float?
  rating_quantity Int?
  cuisine         String
  wifiName        String?
  wifipwd         String?
  coordinates     Json?
  open            Int?
  close           Int?
  tipsPercentages Decimal[]       @default([10, 12, 15])
  paymentMethods  String[]        @default(["cash", "card"])
  social          String[]        @default([])
  created         String?
  updated         String?
  menus           Menu[]
  tables          Table[]
  orders          Order[]
  users           User[]
  employees       Employee[]
  feedbacks       Feedback[]
  payments        Payments[]
  categories      Category[]
  products        Product[]
  restaurant      Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId         String?         @default("cllb3d9b90003cedclcthud41")
  admin           Admin?          @relation(fields: [adminId], references: [id])
  notifications   Notifications[]
}

model Table {
  id                String     @id @default(cuid())
  number            Int
  floorId           String?
  locationId        String?
  seats             Int?
  order_in_progress Boolean    @default(false)
  branch            Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branchId          String
  order             Order?
  users             User[]
  employees         Employee[]
  feedbacks         Feedback[]
  adminId           String?    @default("cllb3d9b90003cedclcthud41")
  admin             Admin?     @relation(fields: [adminId], references: [id])
}

model Menu {
  id              String           @id @default(cuid())
  name            String?
  type            String?
  currency        String?
  fromHour        Decimal?
  toHour          Decimal?
  allday          Boolean?
  branchId        String
  branch          Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories      Category[]
  personalizeMenu Boolean?         @default(false)
  image           String?
  availabilities  Availabilities[]
  adminId         String?          @default("cllb3d9b90003cedclcthud41")
  // automatically add table also on admin model
  admin           Admin?           @relation(fields: [adminId], references: [id])
}

model Availabilities {
  id         String    @id @default(cuid())
  dayOfWeek  Int?
  startTime  String?
  endTime    String?
  menuId     String?
  menu       Menu?     @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  adminId    String?   @default("cllb3d9b90003cedclcthud41")
  admin      Admin?    @relation(fields: [adminId], references: [id])

  @@unique([dayOfWeek, startTime, endTime, menuId])
}

model Category {
  id             String           @id @default(cuid())
  accountId      String?
  name           String
  image          String?
  // nameTranslations        Json?
  description    String?
  pdf            Boolean?         @default(false)
  // descriptionTranslations Json?
  availabilities Availabilities[]

  menu     Menu[]
  products Product[]
  branch   Branch?   @relation(fields: [branchId], references: [id])
  branchId String?
  adminId  String?   @default("cllb3d9b90003cedclcthud41")
  admin    Admin?    @relation(fields: [adminId], references: [id])
}

model Product {
  id             String          @id @default(cuid())
  plu            String?
  image          String
  name           String
  description    String
  price          Decimal
  available      Boolean
  categoryId     String?
  category       Category?       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modifierGroups ModifierGroup[]
  cartItems      CartItem[]
  branch         Branch?         @relation(fields: [branchId], references: [id])
  branchId       String?
  adminId        String?         @default("cllb3d9b90003cedclcthud41")
  admin          Admin?          @relation(fields: [adminId], references: [id])
}

model Order {
  id            String          @id @default(cuid())
  tip           Decimal?
  paid          Boolean?
  total         Decimal?
  paidDate      DateTime?
  creationDate  DateTime
  orderedDate   DateTime
  active        Boolean?
  table         Table?          @relation(fields: [tableId], references: [id])
  tableId       String?         @unique
  users         User[]
  branch        Branch?         @relation(fields: [branchId], references: [id])
  branchId      String?
  cartItems     CartItem[]
  payments      Payments[]
  adminId       String?         @default("cllb3d9b90003cedclcthud41")
  admin         Admin?          @relation(fields: [adminId], references: [id])
  notifications Notifications[]
}

model CartItem {
  id            String      @id @default(cuid())
  plu           String?
  name          String?
  image         String?
  price         Float
  creationDate  String?
  quantity      Int
  orderId       String?
  productId     String?
  product       Product?    @relation(fields: [productId], references: [id])
  order         Order?      @relation(fields: [orderId], references: [id])
  comments      String?
  paid          Boolean?    @default(false)
  paidBy        String?
  stock         Int?
  modifier      Modifiers[]
  feedback      Feedback?   @relation(fields: [feedbackId], references: [id])
  feedbackId    String?
  user          User[]
  activeOnOrder Boolean?
  rating        String?
  adminId       String?     @default("cllb3d9b90003cedclcthud41")
  admin         Admin?      @relation(fields: [adminId], references: [id])
}

model Modifiers {
  id                      String         @id @default(cuid())
  name                    String?
  mandatorySelected       Boolean?
  onlyOne                 Boolean?
  multiSelect             Boolean?
  mandatoryOneMultiSelect Boolean?
  extraPrice              Decimal?
  modifierGroups          ModifierGroup? @relation(fields: [modifierGroupId], references: [id])
  modifierGroupId         String?
  cartItems               CartItem[]
  cartItemId              String?
  adminId                 String?        @default("cllb3d9b90003cedclcthud41")
  admin                   Admin?         @relation(fields: [adminId], references: [id])
}

model ModifierGroup {
  id                  String      @id @default(cuid())
  type                String      @default("radio")
  name                String?
  plu                 String?
  max                 Int?
  min                 Int?
  multiMax            Int?
  multiply            Int?
  nameTranslations    Json?
  minSelectionAllowed Int?
  maxSelectionAllowed Int?
  isMandatory         Boolean?
  modifiers           Modifiers[]
  products            Product[]
  cartItemId          String?
  adminId             String?     @default("cllb3d9b90003cedclcthud41")
  admin               Admin?      @relation(fields: [adminId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  image         String?
  phone         Int?
  access        Int?
  email         String?         @unique
  creationDate  DateTime        @default(now())
  password      Password?
  color         String?
  tip           Decimal?
  paid          Decimal?
  total         Decimal?
  orderId       String?
  orders        Order?          @relation(fields: [orderId], references: [id])
  role          Role?
  branch        Branch?         @relation(fields: [branchId], references: [id])
  branchId      String?
  cartItems     CartItem[]
  tables        Table?          @relation(fields: [tableId], references: [id])
  tableId       String?
  feedbacks     Feedback[]
  sessions      Session[]
  payments      Payments[]
  restaurant    Restaurant?     @relation(fields: [restaurantId], references: [id])
  restaurantId  String?
  adminId       String?
  admin         Admin?          @relation(fields: [adminId], references: [id])
  notifications Notifications[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Employee {
  id            String          @id @default(cuid())
  role          Role
  name          String
  image         String?
  phone         String?
  email         String
  tables        Table[]
  feedbacks     Feedback[]
  branch        Branch?         @relation(fields: [branchId], references: [id])
  branchId      String?
  adminId       String?         @default("cllb3d9b90003cedclcthud41")
  admin         Admin?          @relation(fields: [adminId], references: [id])
  notifications Notifications[]
}

enum Role {
  admin
  manager
  waiter
  user
}

model Feedback {
  id           String     @id @default(cuid())
  type         String
  report       String
  comments     String?
  creationDate String?
  branch       Branch?    @relation(fields: [branchId], references: [id])
  branchId     String?
  employees    Employee[]
  table        Table?     @relation(fields: [tableId], references: [id])
  tableId      String?
  cartItems    CartItem[]
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
  adminId      String?    @default("cllb3d9b90003cedclcthud41")
  admin        Admin?     @relation(fields: [adminId], references: [id])
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Payments {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  method    PaymentMethod
  amount    Decimal
  tip       Decimal?
  total     Decimal?
  branchId  String?
  branch    Branch?       @relation(fields: [branchId], references: [id])
  orderId   String?
  order     Order?        @relation(fields: [orderId], references: [id])
  userId    String?
  user      User?         @relation(fields: [userId], references: [id])
  adminId   String?       @default("cllb3d9b90003cedclcthud41")
  admin     Admin?        @relation(fields: [adminId], references: [id])
}

enum PaymentMethod {
  cash
  card
  debitCard
  paypal
  applePay
  other
}

model Notifications {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  method     NotificationMethod
  recipient  String?
  sender     String?
  status     StatusMethod
  message    String
  branchId   String?
  branch     Branch?            @relation(fields: [branchId], references: [id])
  orderId    String?
  order      Order?             @relation(fields: [orderId], references: [id])
  userId     String?
  user       User?              @relation(fields: [userId], references: [id])
  adminId    String?            @default("cllb3d9b90003cedclcthud41")
  admin      Admin?             @relation(fields: [adminId], references: [id])
  employeeId String?
  employee   Employee?          @relation(fields: [employeeId], references: [id])
}

enum StatusMethod {
  pending
  accepted
  rejected
  received
}

enum NotificationMethod {
  email
  sms
  push
  whatsapp
}

model Deliverect {
  id              String  @id @default(cuid())
  deliverectToken String?
  // TODO add deliverect details like channel id, orderId etc???
  // channelName         String?

  deliverectExpiration Int?
}
