generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id       String   @id @default(cuid())
  name     String
  branches Branch[]

  updatedAt    DateTime? @updatedAt
  createdAt    DateTime  @default(now())
  moderatorIds String[]
}

// model Venue {
//    id        String    @id @default(cuid())
//    chainId   String?
//     chain     Chain?    @relation(fields: [chainId], references: [id])
//     name      String
//     image     String
//     cuisine   String
//       phone           String?
//   email           String?        @unique
//     city      String
//     country   String
//   street    String
//   zipCode       Int
//   timezone      String?
//   wifiName     String?
//   wifiPassword String?
//     tipsPercentages Decimal[]      @default([10, 12, 15])
//       paymentMethods  String[]       @default(["cash", "card"])
//   menus           Menu[]
//     tables          Table[]

//   employees       Employee[]
//   feedbacks       Feedback[]
//   payments        Payments[]
//     updatedAt       DateTime?      @updatedAt
//   createdAt       DateTime       @default(now())

// }

model Branch {
  id           String   @id @default(cuid())
  name         String
  // restaurantId    String
  address      String
  extraAddress String
  city         String
  country      String?
  timezone     String?
  phone        String?
  email        String   @unique
  language     String?  @default("en")
  image        String
  // rating          Float?
  // rating_quantity Int?
  managerIds   String[]

  cuisine         String
  wifiName        String?
  wifiPwd         String?
  // coordinates     Json?
  // open            Int?
  // close           Int?
  tipsPercentages Decimal[]  @default([10, 12, 15])
  paymentMethods  String[]   @default(["cash", "card"])
  social          String[]   @default([])
  menus           Menu[]
  tables          Table[]
  orders          Order[]
  users           User[]
  employees       Employee[]
  feedbacks       Feedback[]
  payments        Payments[]

  // restaurant      Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  notifications Notification[]
  chain         Chain?         @relation(fields: [chainId], references: [id])
  chainId       String?
  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())

  availabilities Availabilities[]
  MenuCategory   MenuCategory[]
  MenuItem       MenuItem[]
}

model Table {
  id                String     @id @default(cuid())
  number            Int
  floorId           String?
  locationId        String?
  seats             Int?
  order_in_progress Boolean    @default(false)
  branch            Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branchId          String
  order             Order?
  users             User[]
  employees         Employee[]
  feedbacks         Feedback[]

  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Menu {
  id       String  @id @default(cuid())
  name     String?
  type     String?
  currency String?

  branchId        String
  branch          Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuCategories  MenuCategory[]
  personalizeMenu Boolean?         @default(false)
  image           String?
  availabilities  Availabilities[]

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model Availabilities {
  id             String        @id @default(cuid())
  dayOfWeek      Int?
  startTime      String?
  endTime        String?
  menuId         String?
  menu           Menu?         @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuCategory   MenuCategory? @relation(fields: [menuCategoryId], references: [id])
  menuCategoryId String?
  branchId       String?
  branch         Branch?       @relation(fields: [branchId], references: [id])
  updatedAt      DateTime?     @updatedAt
  createdAt      DateTime      @default(now())

  @@unique([dayOfWeek, startTime, endTime, menuId])
}

model MenuCategory {
  id             String           @id @default(cuid())
  name           String
  image          String?
  description    String?
  pdf            Boolean?         @default(false)
  availabilities Availabilities[]
  menu           Menu[]
  menuItems      MenuItem[]
  branch         Branch?          @relation(fields: [branchId], references: [id])
  branchId       String?

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model MenuItem {
  id             String          @id @default(cuid())
  plu            String?
  image          String
  name           String
  description    String
  price          Decimal
  productType    Int? //Products 1, Modifiers 2, Modifier Groups 3, and Bundles 4
  available      Boolean
  menuCategoryId String?
  menuCategory   MenuCategory?   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modifierGroups ModifierGroup[]
  cartItems      CartItem[]
  branch         Branch?         @relation(fields: [branchId], references: [id])
  branchId       String?

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model Order {
  id           String     @id @default(cuid())
  tip          Decimal?
  paid         Boolean?
  total        Decimal?
  paidDate     DateTime?
  creationDate DateTime
  orderedDate  DateTime
  active       Boolean?
  table        Table?     @relation(fields: [tableId], references: [id])
  tableId      String?    @unique
  users        User[]
  branch       Branch?    @relation(fields: [branchId], references: [id])
  branchId     String?
  cartItems    CartItem[]
  payments     Payments[]
}

model CartItem {
  id            String      @id @default(cuid())
  plu           String?
  name          String?
  image         String?
  price         Float
  creationDate  String?
  quantity      Int
  orderId       String?
  menuItemId    String?
  menuItem      MenuItem?   @relation(fields: [menuItemId], references: [id])
  order         Order?      @relation(fields: [orderId], references: [id])
  comments      String?
  paid          Boolean?    @default(false)
  paidBy        String?
  stock         Int?
  modifier      Modifiers[]
  feedback      Feedback?   @relation(fields: [feedbackId], references: [id])
  feedbackId    String?
  user          User[]
  activeOnOrder Boolean?
  rating        String?
}

model Modifiers {
  id              String         @id @default(cuid())
  name            String?
  plu             String?        @unique
  max             Int?           @default(0)
  min             Int?           @default(0)
  multiply        Int?           @default(0)
  extraPrice      Decimal?
  modifierGroups  ModifierGroup? @relation(fields: [modifierGroupId], references: [id])
  modifierGroupId String?
  cartItems       CartItem[]
  cartItemId      String?
}

model ModifierGroup {
  id         String      @id @default(cuid())
  // type             String      @default("radio")
  name       String?
  plu        String?     @unique
  max        Int?        @default(0)
  min        Int?        @default(0)
  multiMax   Int?        @default(0)
  multiply   Int?        @default(0)
  // nameTranslations Json?
  modifiers  Modifiers[]
  menuItems  MenuItem[]
  cartItemId String?

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model User {
  id           String     @id @default(cuid())
  name         String?
  email        String?    @unique
  image        String?
  phone        String?
  password     Password?
  color        String?
  tip          Decimal?
  paid         Decimal?
  total        Decimal?
  orderId      String?
  orders       Order?     @relation(fields: [orderId], references: [id])
  roles        Role[]
  branch       Branch?    @relation(fields: [branchId], references: [id])
  branchId     String?
  cartItems    CartItem[]
  tables       Table?     @relation(fields: [tableId], references: [id])
  tableId      String?
  feedbacks    Feedback[]
  sessions     Session[]
  payments     Payments[]
  // restaurant    Restaurant?    @relation(fields: [restaurantId], references: [id])
  restaurantId String?

  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model Password {
  id         String    @id @default(cuid())
  hash       String
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String?   @unique
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String?   @unique
}

model Employee {
  id        String        @id @default(cuid())
  role      EmployeeRoles
  name      String
  image     String?
  phone     String?
  email     String?       @unique
  password  Password?
  tables    Table[]
  feedbacks Feedback[]
  branch    Branch?       @relation(fields: [branchId], references: [id])
  branchId  String?

  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())
  notifications Notification[]
  sessions      Session[]
}

enum EmployeeRoles {
  manager
  waiter
}

model Feedback {
  id           String     @id @default(cuid())
  type         String
  report       String
  comments     String?
  creationDate String?
  branch       Branch?    @relation(fields: [branchId], references: [id])
  branchId     String?
  employees    Employee[]
  table        Table?     @relation(fields: [tableId], references: [id])
  tableId      String?
  cartItems    CartItem[]
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
}

model Session {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  employee       Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId     String?
  expirationDate DateTime
}

model Payments {
  id String @id @default(cuid())

  method   PaymentMethod
  amount   Decimal
  tip      Decimal?
  total    Decimal?
  branchId String?
  branch   Branch?       @relation(fields: [branchId], references: [id])
  orderId  String?
  order    Order?        @relation(fields: [orderId], references: [id])
  userId   String?
  user     User?         @relation(fields: [userId], references: [id])

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

enum PaymentMethod {
  cash
  card
  debitCard
  paypal
  applePay
  other
}

model Notification {
  id        String             @id @default(cuid())
  method    NotificationMethod
  type      String?
  status    StatusMethod
  message   String
  branchId  String?
  branch    Branch?            @relation(fields: [branchId], references: [id])
  tableId   String?
  table     Table?             @relation(fields: [tableId], references: [id])
  userId    String?
  user      User?              @relation(fields: [userId], references: [id])
  employees Employee[]
  updatedAt DateTime?          @updatedAt
  createdAt DateTime           @default(now())
}

enum StatusMethod {
  pending
  accepted
  rejected
  received
  completed
}

enum NotificationMethod {
  email
  sms
  push
  whatsapp
}

model Deliverect {
  id              String  @id @default(cuid())
  deliverectToken String?
  // TODO add deliverect details like channel id, orderId etc???
  // channelName         String?

  deliverectExpiration Int?
}
