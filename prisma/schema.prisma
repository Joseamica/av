generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id           String    @id @default(cuid())
  name         String
  branches     Branch[]
  updatedAt    DateTime? @updatedAt
  createdAt    DateTime  @default(now())
  moderatorIds String[]
}

// model Venue {
//    id        String    @id @default(cuid())
//    chainId   String?
//     chain     Chain?    @relation(fields: [chainId], references: [id])
//     name      String
//     image     String
//     cuisine   String
//       phone           String?
//   email           String?        @unique
//     city      String
//     country   String
//   street    String
//   zipCode       Int
//   timezone      String?
//   wifiName     String?
//   wifiPassword String?
//     tipsPercentages Decimal[]      @default([10, 12, 15])
//       paymentMethods  String[]       @default(["cash", "card"])
//   menus           Menu[]
//     tables          Table[]

//   employees       Employee[]
//   feedbacks       Feedback[]
//   payments        Payments[]
//     updatedAt       DateTime?      @updatedAt
//   createdAt       DateTime       @default(now())

// }

model Branch {
  id               String            @id @default(cuid())
  name             String
  // restaurantId    String
  address          String
  extraAddress     String
  city             String
  country          String?
  timezone         String?
  phone            String?
  email            String            @unique
  language         String?           @default("en")
  image            String
  // rating          Float?
  // rating_quantity Int?
  managerIds       String[]
  cuisine          String
  wifiName         String?
  wifiPwd          String?
  // coordinates     Json?
  // open            Int?
  // close           Int?
  tipsPercentages  Decimal[]         @default([10, 12, 15])
  paymentMethods   String[]          @default(["cash", "card"])
  social           String[]          @default([])
  menus            Menu[]
  tables           Table[]
  orders           Order[]
  users            User[]
  employees        Employee[]
  feedbacks        Feedback[]
  payments         Payments[]
  availabilities   Availabilities[]
  modifierGroups   ModifierGroup[]
  modifiers        Modifiers[]
  categories       Category[]
  products         Product[]
  // restaurant      Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notifications    Notification[]
  chain            Chain?            @relation(fields: [chainId], references: [id])
  chainId          String?
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
  productModifiers ProductModifier[]
}

model Table {
  id                String         @id @default(cuid())
  number            Int
  floorId           String?
  locationId        String?
  seats             Int?
  order_in_progress Boolean        @default(false)
  branch            Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branchId          String
  order             Order?
  users             User[]
  employees         Employee[]
  feedbacks         Feedback[]
  updatedAt         DateTime?      @updatedAt
  createdAt         DateTime       @default(now())
  notifications     Notification[]
}

model Menu {
  id              String           @id @default(cuid())
  name            String?
  type            String?
  currency        String?
  branchId        String
  branch          Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories      Category[]
  personalizeMenu Boolean?         @default(false)
  image           String?
  availabilities  Availabilities[]
  updatedAt       DateTime?        @updatedAt
  createdAt       DateTime         @default(now())
}

model Availabilities {
  id         String    @id @default(cuid())
  dayOfWeek  Int?
  startTime  String?
  endTime    String?
  menuId     String?
  menu       Menu?     @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  branchId   String?
  branch     Branch?   @relation(fields: [branchId], references: [id])
  updatedAt  DateTime? @updatedAt
  createdAt  DateTime  @default(now())

  @@unique([dayOfWeek, startTime, endTime, menuId])
}

model Category {
  id             String           @id @default(cuid())
  name           String
  image          String?
  displayOrder   Int?
  description    String?
  pdf            Boolean?         @default(false)
  availabilities Availabilities[]
  menu           Menu[]
  products       Product[]
  branch         Branch?          @relation(fields: [branchId], references: [id])
  branchId       String?
  updatedAt      DateTime?        @updatedAt
  createdAt      DateTime         @default(now())
}

model Product {
  id             String          @id @default(cuid())
  plu            String?
  image          String
  name           String
  description    String
  //best name for turning off or on
  price          Decimal
  productType    Int? //Products 1, Modifiers 2, Modifier Groups 3, and Bundles 4
  available      Boolean
  categoryId     String?
  category       Category?       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modifierGroups ModifierGroup[]
  cartItems      CartItem[]
  branch         Branch?         @relation(fields: [branchId], references: [id])
  branchId       String?
  updatedAt      DateTime?       @updatedAt
  createdAt      DateTime        @default(now())
}

model Order {
  id            String         @id @default(cuid())
  tip           Decimal?
  paid          Boolean?
  total         Decimal?
  active        Boolean?
  table         Table?         @relation(fields: [tableId], references: [id])
  tableId       String?        @unique
  tableNumber   Int?
  users         User[]
  branch        Branch?        @relation(fields: [branchId], references: [id])
  branchId      String?
  cartItems     CartItem[]
  payments      Payments[]
  paidDate      DateTime?
  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model CartItem {
  id    String  @id @default(cuid())
  plu   String?
  name  String?
  image String?
  price Float

  quantity         Int
  orderId          String?
  productId        String?
  product          Product?          @relation(fields: [productId], references: [id])
  order            Order?            @relation(fields: [orderId], references: [id])
  comments         String?
  paid             Boolean?          @default(false)
  paidBy           String?
  stock            Int?
  modifier         Modifiers[]
  feedback         Feedback?         @relation(fields: [feedbackId], references: [id])
  feedbackId       String?
  user             User[]
  activeOnOrder    Boolean?
  rating           String?
  productModifiers ProductModifier[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model Modifiers {
  id        String   @id @default(cuid())
  name      String?
  available Boolean? @default(true)

  plu             String?        @unique
  max             Int?           @default(0)
  min             Int?           @default(0)
  multiply        Int?           @default(0)
  extraPrice      Decimal?
  modifierGroups  ModifierGroup? @relation(fields: [modifierGroupId], references: [id])
  modifierGroupId String?
  cartItems       CartItem[]
  cartItemId      String?
  updatedAt       DateTime?      @updatedAt
  createdAt       DateTime       @default(now())
  branch          Branch?        @relation(fields: [branchId], references: [id])
  branchId        String?
}

model ProductModifier {
  id         String    @id @default(cuid())
  name       String?
  quantity   Int?      @default(0)
  plu        String?   @unique
  extraPrice Decimal?
  total      Decimal?
  cartItem   CartItem? @relation(fields: [cartItemId], references: [id])
  cartItemId String?
  branchId   String?
  branch     Branch?   @relation(fields: [branchId], references: [id])
  updatedAt  DateTime? @updatedAt
  createdAt  DateTime  @default(now())
}

model ModifierGroup {
  id         String      @id @default(cuid())
  // type             String      @default("radio")
  name       String?
  available  Boolean?    @default(true)
  plu        String?     @unique
  max        Int?        @default(0)
  min        Int?        @default(0)
  multiMax   Int?        @default(1)
  multiply   Int?        @default(0)
  // nameTranslations Json?
  modifiers  Modifiers[]
  products   Product[]
  cartItemId String?

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
  branch    Branch?   @relation(fields: [branchId], references: [id])
  branchId  String?
}

model User {
  id           String     @id @default(cuid())
  name         String?
  email        String?    @unique
  image        String?
  phone        String?
  password     Password?
  color        String?
  tip          Decimal?
  paid         Decimal?
  total        Decimal?
  orderId      String?
  orders       Order?     @relation(fields: [orderId], references: [id])
  roles        Role[]
  branch       Branch?    @relation(fields: [branchId], references: [id])
  branchId     String?
  cartItems    CartItem[]
  tables       Table?     @relation(fields: [tableId], references: [id])
  tableId      String?
  feedbacks    Feedback[]
  sessions     Session[]
  payments     Payments[]
  // restaurant    Restaurant?    @relation(fields: [restaurantId], references: [id])
  restaurantId String?

  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Role {
  id          String       @id @unique @default(cuid())
  name        String       @unique
  users       User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String   @id @unique @default(cuid())
  name      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  id         String    @id @default(cuid())
  hash       String
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String?   @unique
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String?   @unique
}

model Employee {
  id            String         @id @default(cuid())
  role          EmployeeRoles
  name          String
  code          String?
  active        Boolean?       @default(true)
  image         String?
  phone         String?
  email         String?        @unique
  password      Password?
  tables        Table[]
  feedbacks     Feedback[]
  branch        Branch?        @relation(fields: [branchId], references: [id])
  branchId      String?
  notifications Notification[]
  sessions      Session[]
  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())
}

enum EmployeeRoles {
  manager
  waiter
}

model Feedback {
  id        String     @id @default(cuid())
  type      String
  report    String
  comments  String?
  branch    Branch?    @relation(fields: [branchId], references: [id])
  branchId  String?
  employees Employee[]
  table     Table?     @relation(fields: [tableId], references: [id])
  tableId   String?
  cartItems CartItem[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  updatedAt DateTime?  @updatedAt
  createdAt DateTime   @default(now())
}

model Session {
  id             String    @id @default(uuid())
  active         Boolean   @default(true)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  employee       Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId     String?
  expirationDate DateTime
  updatedAt      DateTime? @updatedAt
  createdAt      DateTime  @default(now())
}

model Payments {
  id           String         @id @default(cuid())
  method       PaymentMethod
  status       StatusMethod?  @default(pending)
  amount       Decimal
  tip          Decimal?
  total        Decimal?
  branchId     String?
  branch       Branch?        @relation(fields: [branchId], references: [id])
  orderId      String?
  order        Order?         @relation(fields: [orderId], references: [id])
  userId       String?
  user         User?          @relation(fields: [userId], references: [id])
  employeesIds String[]
  notification Notification[]
  updatedAt    DateTime?      @updatedAt
  createdAt    DateTime       @default(now())
}

enum PaymentMethod {
  cash
  card
  debitCard
  paypal
  applePay
  terminal
  other
}

model Notification {
  id        String              @id @default(cuid())
  method    NotificationMethod?
  type      String?
  type_temp NotificationType?
  status    StatusMethod?
  message   String?
  branchId  String?
  branch    Branch?             @relation(fields: [branchId], references: [id])
  tableId   String?
  table     Table?              @relation(fields: [tableId], references: [id])
  userId    String?
  user      User?               @relation(fields: [userId], references: [id])
  employees Employee[]

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  orderId   String?
  order     Order?    @relation(fields: [orderId], references: [id])
  paymentId String?
  payment   Payments? @relation(fields: [paymentId], references: [id])
}

enum NotificationType {
  CALL
  ORDER
  PAYMENT
  FEEDBACK
  INFORMATIVE
  OTHER
}

enum StatusMethod {
  pending
  accepted
  rejected
  received
  completed
  disputed
}

enum NotificationMethod {
  email
  sms
  push
  whatsapp
}

model Deliverect {
  id              String  @id @default(cuid())
  deliverectToken String?
  // TODO add deliverect details like channel id, orderId etc???
  // channelName         String?

  deliverectExpiration Int?
}
